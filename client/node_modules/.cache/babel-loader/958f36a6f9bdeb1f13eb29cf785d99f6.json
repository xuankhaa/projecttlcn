{"ast":null,"code":"import _regeneratorRuntime from \"C:/Users/Tanh/Music/ShopTTT/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"C:/Users/Tanh/Music/ShopTTT/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\Tanh\\\\Music\\\\ShopTTT\\\\client\\\\src\\\\components\\\\Admin\\\\components\\\\AppChat\\\\Contact\\\\Contact.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getAllConversationList, showConversation, updateIdConversation, updateLastMessageConversation } from '../../../../../actions/ChatAction';\nimport ListConversation from './ListConversation';\nimport io from 'socket.io-client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Contact(props) {\n  _s();\n\n  var socket;\n  var ENDPOINT = 'localhost:5000';\n  var dispatch = useDispatch();\n  var conversationList = useSelector(function (state) {\n    return state.chat.conversationList;\n  });\n  var idConversation = useSelector(function (state) {\n    return state.chat.idConversation;\n  });\n\n  if (conversationList) {}\n\n  useEffect(function () {\n    dispatch(getAllConversationList());\n  }, []);\n  useEffect(function () {\n    if (conversationList) {\n      dispatch(updateIdConversation(conversationList[0]));\n    }\n  }, [conversationList]); // useEffect(() => {\n  //     dispatch(SeenConversation(idConversation))\n  // }, [idConversation])\n\n  useEffect(function () {\n    socket = io(ENDPOINT);\n    socket.on('lastMessage', /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(data) {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return dispatch(updateLastMessageConversation(data));\n\n              case 2:\n                dispatch(getAllConversationList());\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function (_x) {\n        return _ref.apply(this, arguments);\n      };\n    }());\n    socket.on('show-me', function (data) {\n      dispatch(showConversation(data));\n    });\n    return function () {\n      return socket.disconnect();\n    };\n  }, []);\n\n  var onConversationClick = function onConversationClick(conversation) {\n    dispatch(updateIdConversation(conversation));\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"contact\",\n    children: conversationList ? /*#__PURE__*/_jsxDEV(ListConversation, {\n      conversationList: conversationList,\n      onConversationClick: onConversationClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 37\n    }, this) : ''\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 9\n  }, this);\n}\n\n_s(Contact, \"8xJiMv8KwdwWP+d1gpJMnlyDW7c=\", false, function () {\n  return [useDispatch, useSelector, useSelector];\n});\n\n_c = Contact;\nexport default Contact;\n\nvar _c;\n\n$RefreshReg$(_c, \"Contact\");","map":{"version":3,"sources":["C:/Users/Tanh/Music/ShopTTT/client/src/components/Admin/components/AppChat/Contact/Contact.js"],"names":["React","useEffect","useDispatch","useSelector","getAllConversationList","showConversation","updateIdConversation","updateLastMessageConversation","ListConversation","io","Contact","props","socket","ENDPOINT","dispatch","conversationList","state","chat","idConversation","on","data","disconnect","onConversationClick","conversation"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAAQC,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAASC,sBAAT,EAAiCC,gBAAjC,EAAmDC,oBAAnD,EAAyEC,6BAAzE,QAA8G,mCAA9G;AACA,OAAOC,gBAAP,MAA6B,oBAA7B;AACA,OAAOC,EAAP,MAAe,kBAAf;;;AAEA,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AAAA;;AACpB,MAAIC,MAAJ;AACA,MAAMC,QAAQ,GAAG,gBAAjB;AACA,MAAMC,QAAQ,GAAGZ,WAAW,EAA5B;AACA,MAAMa,gBAAgB,GAAGZ,WAAW,CAAC,UAAAa,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAN,CAAWF,gBAAf;AAAA,GAAN,CAApC;AACA,MAAMG,cAAc,GAAGf,WAAW,CAAC,UAAAa,KAAK;AAAA,WAAIA,KAAK,CAACC,IAAN,CAAWC,cAAf;AAAA,GAAN,CAAlC;;AAEA,MAAGH,gBAAH,EAAoB,CACnB;;AACDd,EAAAA,SAAS,CAAC,YAAM;AACZa,IAAAA,QAAQ,CAACV,sBAAsB,EAAvB,CAAR;AACH,GAFQ,EAEN,EAFM,CAAT;AAIAH,EAAAA,SAAS,CAAC,YAAM;AACZ,QAAGc,gBAAH,EAAoB;AAChBD,MAAAA,QAAQ,CAACR,oBAAoB,CAACS,gBAAgB,CAAC,CAAD,CAAjB,CAArB,CAAR;AACH;AACJ,GAJQ,EAIN,CAACA,gBAAD,CAJM,CAAT,CAboB,CAmBpB;AACA;AACA;;AAEAd,EAAAA,SAAS,CAAC,YAAM;AACZW,IAAAA,MAAM,GAAGH,EAAE,CAACI,QAAD,CAAX;AAEAD,IAAAA,MAAM,CAACO,EAAP,CAAU,aAAV;AAAA,0EAAyB,iBAAMC,IAAN;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBACfN,QAAQ,CAACP,6BAA6B,CAACa,IAAD,CAA9B,CADO;;AAAA;AAErBN,gBAAAA,QAAQ,CAACV,sBAAsB,EAAvB,CAAR;;AAFqB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAzB;;AAAA;AAAA;AAAA;AAAA;AAKAQ,IAAAA,MAAM,CAACO,EAAP,CAAU,SAAV,EAAqB,UAAAC,IAAI,EAAI;AACzBN,MAAAA,QAAQ,CAACT,gBAAgB,CAACe,IAAD,CAAjB,CAAR;AACH,KAFD;AAIA,WAAO;AAAA,aAAMR,MAAM,CAACS,UAAP,EAAN;AAAA,KAAP;AACH,GAbQ,EAaN,EAbM,CAAT;;AAeA,MAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,YAAD,EAAkB;AAC1CT,IAAAA,QAAQ,CAACR,oBAAoB,CAACiB,YAAD,CAArB,CAAR;AACH,GAFD;;AAGA,sBACI;AAAK,IAAA,SAAS,EAAC,SAAf;AAAA,cAEQR,gBAAgB,gBAAI,QAAC,gBAAD;AAAkB,MAAA,gBAAgB,EAAEA,gBAApC;AAAsD,MAAA,mBAAmB,EAAEO;AAA3E;AAAA;AAAA;AAAA;AAAA,YAAJ,GAA2H;AAFnJ;AAAA;AAAA;AAAA;AAAA,UADJ;AAOH;;GAhDQZ,O;UAGYR,W,EACQC,W,EACFA,W;;;KALlBO,O;AAkDT,eAAeA,OAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport {useDispatch, useSelector} from 'react-redux'\nimport { getAllConversationList, showConversation, updateIdConversation, updateLastMessageConversation } from '../../../../../actions/ChatAction';\nimport ListConversation from './ListConversation';\nimport io from 'socket.io-client'\n\nfunction Contact(props) {\n    let socket\n    const ENDPOINT = 'localhost:5000';\n    const dispatch = useDispatch()\n    const conversationList = useSelector(state => state.chat.conversationList)\n    const idConversation = useSelector(state => state.chat.idConversation)\n\n    if(conversationList){\n    }\n    useEffect(() => {\n        dispatch(getAllConversationList())\n    }, [])\n\n    useEffect(() => {\n        if(conversationList){\n            dispatch(updateIdConversation(conversationList[0]))\n        }\n    }, [conversationList])\n\n    // useEffect(() => {\n    //     dispatch(SeenConversation(idConversation))\n    // }, [idConversation])\n\n    useEffect(() => {\n        socket = io(ENDPOINT)\n\n        socket.on('lastMessage', async data => {\n            await dispatch(updateLastMessageConversation(data))\n            dispatch(getAllConversationList())\n        })\n\n        socket.on('show-me', data => {\n            dispatch(showConversation(data))\n        })\n\n        return () => socket.disconnect()\n    }, [])\n\n    const onConversationClick = (conversation) => {\n        dispatch(updateIdConversation(conversation))\n    }\n    return (\n        <div className=\"contact\">\n            {\n                conversationList ? (<ListConversation conversationList={conversationList} onConversationClick={onConversationClick}></ListConversation>) : ''\n            }\n        </div>\n    );\n}\n\nexport default Contact;"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import io from \"socket.io-client\";\n// import { useSelector } from \"react-redux\";\n// import axios from \"axios\";\n// import ListMessage from \"./Components/ListMessage.js/ListMessage\";\n// import TypeMessage from \"./Components/TypeMessage/TypeMessage\";\n// import './AppChat.css'\n// import { LineOutlined } from '@ant-design/icons';\n// let socket;\n// function AppChat(props) {\n//   const ENDPOINT = \"http://localhost:4000\";\n//   const [messages, setMessages] = useState([]);\n//   const [openChat, setOpenChat] = useState(false)\n//   const { userInfo } = useSelector((state) => state.userSignin)\n//   useEffect(() => {\n//     const getAllMessageByConversation = async () => {\n//       const {data}  = await axios.get(\n//         `http://localhost:4000/chat/message?idUser=${userInfo._id}`\n//       );\n//       setMessages(data.messageList);\n//     }\n//     getAllMessageByConversation()\n//   }, []);\n//   useEffect(() => {\n//     socket = io(ENDPOINT);\n//     socket.emit('join_conversation', userInfo._id);\n//     //setup response\n//     socket.on('newMessage', (message) => {\n//       setMessages([...messages, message]);\n//     });\n//     // disconnect ||cleanup the effect\n//     // return () => socket.disconnect();\n//     // eslint-disable-next-line\n//   }, [messages]);\n//   useEffect(() => {\n//     const scrollMessage = () => {\n//       var element = document.querySelector(\".chatuser-listmessage\");\n//       element.scrollTop = element.scrollHeight;\n//     }\n//     if(openChat){\n//       scrollMessage()\n//     }\n//   })\n//   const handleChatFormSubmit = async (message) => {\n//     const sender = userInfo.name;\n//     //emit create conversation and chat\n//     if (messages.length === 0) {\n//       socket.emit('create_conversation', userInfo);\n//       socket.on('response_room', async (conversation) => {\n//         const payload = {\n//           sender,\n//           message,\n//           idConversation: conversation._id,\n//         };\n//         const {data} = await axios.post('http://localhost:4000/chat/save', payload);\n//         socket.emit('chat', data);\n//       });\n//     } else {\n//       const idConversation = messages[0].idConversation._id || messages[0].idConversation;\n//       // request save message\n//       const payload = {\n//         sender,\n//         message,\n//         idConversation,\n//       };\n//       const {data} = await axios.post('http://localhost:4000/chat/save', payload)\n//       socket.emit('chat', data);\n//     } \n//   };\n// //   return (\n// //   <div className=\"appchat\">\n// //       {\n// //         openChat ? '' : (\n// //           <div className=\"openchat\" onClick={() => setOpenChat(!openChat)}>\n// //             Chat với nhân viên\n// //           </div>\n// //         )\n// //       }\n// //       {\n// //         openChat ? (<div className=\"chatuser\">\n// //         <div className=\"chatuser-user\">\n// //           <span className=\"chatuser-user-name\">Shop TTT</span>\n// //           <span className=\"chatuser-user-line\" onClick={() => setOpenChat(!openChat)}><LineOutlined></LineOutlined></span>\n// //         </div>\n// //         {\n// //           messages ? (<ListMessage messages={messages} user={userInfo}></ListMessage>) : ''\n// //         }\n// //       <TypeMessage onSubmit={handleChatFormSubmit} ></TypeMessage>\n// //       </div>) : ''\n// //       }\n// //   </div>);\n// // }\n// // export default AppChat;","map":{"version":3,"sources":["C:/Users/hoat/OneDrive - Hochiminh City University of Education/.gradle/Desktop/r/client/src/components/AppChat/AppChat.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA","sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import io from \"socket.io-client\";\n// import { useSelector } from \"react-redux\";\n// import axios from \"axios\";\n// import ListMessage from \"./Components/ListMessage.js/ListMessage\";\n// import TypeMessage from \"./Components/TypeMessage/TypeMessage\";\n// import './AppChat.css'\n// import { LineOutlined } from '@ant-design/icons';\n\n// let socket;\n\n// function AppChat(props) {\n//   const ENDPOINT = \"http://localhost:4000\";\n//   const [messages, setMessages] = useState([]);\n//   const [openChat, setOpenChat] = useState(false)\n//   const { userInfo } = useSelector((state) => state.userSignin)\n\n//   useEffect(() => {\n//     const getAllMessageByConversation = async () => {\n//       const {data}  = await axios.get(\n//         `http://localhost:4000/chat/message?idUser=${userInfo._id}`\n//       );\n//       setMessages(data.messageList);\n//     }\n\n//     getAllMessageByConversation()\n//   }, []);\n\n//   useEffect(() => {\n\n//     socket = io(ENDPOINT);\n\n//     socket.emit('join_conversation', userInfo._id);\n//     //setup response\n//     socket.on('newMessage', (message) => {\n//       setMessages([...messages, message]);\n//     });\n\n//     // disconnect ||cleanup the effect\n//     // return () => socket.disconnect();\n//     // eslint-disable-next-line\n//   }, [messages]);\n\n//   useEffect(() => {\n//     const scrollMessage = () => {\n//       var element = document.querySelector(\".chatuser-listmessage\");\n//       element.scrollTop = element.scrollHeight;\n//     }\n//     if(openChat){\n//       scrollMessage()\n//     }\n//   })\n\n//   const handleChatFormSubmit = async (message) => {\n//     const sender = userInfo.name;\n\n//     //emit create conversation and chat\n//     if (messages.length === 0) {\n//       socket.emit('create_conversation', userInfo);\n\n//       socket.on('response_room', async (conversation) => {\n//         const payload = {\n//           sender,\n//           message,\n//           idConversation: conversation._id,\n//         };\n//         const {data} = await axios.post('http://localhost:4000/chat/save', payload);\n//         socket.emit('chat', data);\n//       });\n//     } else {\n//       const idConversation = messages[0].idConversation._id || messages[0].idConversation;\n//       // request save message\n//       const payload = {\n//         sender,\n//         message,\n//         idConversation,\n//       };\n//       const {data} = await axios.post('http://localhost:4000/chat/save', payload)\n//       socket.emit('chat', data);\n//     } \n//   };\n\n  \n// //   return (\n// //   <div className=\"appchat\">\n      \n// //       {\n// //         openChat ? '' : (\n// //           <div className=\"openchat\" onClick={() => setOpenChat(!openChat)}>\n// //             Chat với nhân viên\n// //           </div>\n// //         )\n// //       }\n      \n// //       {\n// //         openChat ? (<div className=\"chatuser\">\n// //         <div className=\"chatuser-user\">\n// //           <span className=\"chatuser-user-name\">Shop TTT</span>\n// //           <span className=\"chatuser-user-line\" onClick={() => setOpenChat(!openChat)}><LineOutlined></LineOutlined></span>\n// //         </div>\n\n// //         {\n// //           messages ? (<ListMessage messages={messages} user={userInfo}></ListMessage>) : ''\n// //         }\n\n// //       <TypeMessage onSubmit={handleChatFormSubmit} ></TypeMessage>\n\n// //       </div>) : ''\n// //       }\n// //   </div>);\n// // }\n\n// // export default AppChat;\n"]},"metadata":{},"sourceType":"module"}